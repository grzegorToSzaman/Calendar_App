{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js"],"names":["WelcomeWindow","keyDown","e","key","props","close","changeName","userName","target","value","this","input","focus","document","addEventListener","removeEventListener","className","top","delay","onChange","ref","element","defaultValue","onClick","Component","Test","bestScore","map","player","id","name","score","GameOver","refresh","ready","bestScores","count","ProgressBar","spanStyle","width","style","Operation","a","b","Answer","handleChange","answer","handleEnter","enter","type","autoComplete","zeroInput","onKeyDown","Info","right","duration","level","Game","state","correctAnswer","randomNumber","c","Math","round","random","d","setState","changeCorrectAnswer","startInterval","intervalID","setInterval","clearInterval","checkAnswer","changeAnswer","result","ceil","gameover","checkScore","userScore","newFetch","number","fetch","headers","method","body","JSON","stringify","then","r","console","log","catch","err","warn","length","highScores","json","App","welcomeWindow","countingWindow","appWindow","gameOver","readyToGame","setScore","changeBestScores","scores","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"gXAUMA,E,2MACFC,QAAU,SAAAC,GACI,UAAVA,EAAEC,KAAmB,EAAKC,MAAMC,S,EAUpCC,WAAa,SAACJ,GACV,EAAKE,MAAMG,SAASL,EAAEM,OAAOC,Q,mFAR7BC,KAAKC,MAAMC,QACXC,SAASC,iBAAiB,UAAWJ,KAAKT,W,6CAI1CY,SAASE,oBAAoB,UAAWL,KAAKT,W,+BAMvC,IAAD,OACL,OACI,yBAAKe,UAAU,WACX,kBAAC,IAAD,CAAMC,KAAG,EAACC,MAAO,GAAG,uCACpB,kBAAC,IAAD,CAAMA,MAAO,IAAKD,KAAG,GAAC,6DACtB,kBAAC,IAAD,CAAMA,KAAG,EAACC,MAAO,KAAK,2CACtB,kBAAC,IAAD,CAAMA,MAAO,IAAKD,KAAG,GAAC,2BAAOE,SAAUT,KAAKJ,WAAYc,IAAK,SAAAC,GAAO,OAAI,EAAKV,MAAQU,GAASC,aAAa,gBAC3G,kBAAC,IAAD,CAAMJ,MAAO,IAAKD,KAAG,GAAC,4BAAQM,QAASb,KAAKN,MAAMC,OAA5B,c,GAvBVmB,aA6BtBC,E,iLAEE,OACI,6BACKf,KAAKN,MAAMsB,UAAUC,KAAI,SAAAC,GACtB,OACI,yBAAKZ,UAAU,cAAcb,IAAKyB,EAAOC,IAAKD,EAAOE,KAArD,IAA4DF,EAAOG,e,GANxEP,aAcbQ,E,2MACF/B,QAAU,SAAAC,GACI,UAAVA,EAAEC,KAAmB,EAAK8B,W,EAS9BA,QAAU,WACN,EAAK7B,MAAM8B,S,mFAPXrB,SAASC,iBAAiB,UAAWJ,KAAKT,W,6CAI1CY,SAASE,oBAAoB,UAAWL,KAAKT,W,+BAM7C,OACI,yBAAKe,UAAU,aACX,kBAAC,IAAD,KACI,0CAEJ,kBAAC,IAAD,CAAME,MAAO,KACT,2CAAiBR,KAAKN,MAAM2B,QAEhC,kBAAC,EAAD,CAAML,UAAWhB,KAAKN,MAAM+B,aAC5B,kBAAC,IAAD,CAAOjB,MAAO,IAAMkB,MAAO,GACvB,4BAAQb,QAASb,KAAKuB,SAAtB,gB,GAzBGT,aAgCjBa,E,iLAEE,IAAMC,EAAY,CACdC,MAAO7B,KAAKN,MAAMmC,MAAQ,KAE9B,OACI,yBAAKvB,UAAU,OACX,0BAAMa,GAAG,eAAeW,MAAOF,S,GAPrBd,aAapBiB,E,iLAEE,OACQ,yBAAKzB,UAAU,aACVN,KAAKN,MAAMsC,EADhB,MACsBhC,KAAKN,MAAMuC,O,GAJzBnB,aAUlBoB,E,2MACFC,aAAe,SAAC3C,GACZ,EAAKE,MAAM0C,OAAO5C,EAAEM,OAAOC,Q,EAE/BsC,YAAc,SAAA7C,GACA,UAAVA,EAAEC,KAAmB,EAAKC,MAAM4C,S,mFAGhCtC,KAAKC,MAAMC,U,+BAEL,IAAD,OACL,OAAO,2BACHqC,KAAK,SACLC,aAAa,MACblC,UAAU,SACVc,KAAK,SACLrB,MAAOC,KAAKN,MAAM+C,UAClBhC,SAAUT,KAAKmC,aACfzB,IAAK,SAAAC,GAAO,OAAI,EAAKV,MAAQU,GAC7B+B,UAAW1C,KAAKqC,kB,GAnBPvB,aAwBf6B,E,iLAGE,OACK,yBAAKrC,UAAU,SACX,kBAAC,IAAD,CAAMsC,OAAK,EAACC,SAAU,MACtB,sCAAY7C,KAAKN,MAAM2B,OACvB,sCAAYrB,KAAKN,MAAMoD,a,GAPrBhC,aAcbiC,E,2MACFC,MAAQ,CACJ3B,MAAO,EACPyB,MAAO,EACPV,OAAQ,GACRa,cAAe,GACfpB,MAAO,EACPG,EAAG,EACHC,EAAG,EACHR,WAAY,I,EAehByB,aAAe,WACX,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAA6B,GAAnB,EAAKN,MAAMF,QACzCS,EAAIH,KAAKC,MAAMD,KAAKE,UAA6B,GAAnB,EAAKN,MAAMF,QAC7C,EAAKU,SAAS,CACVxB,EAAGmB,EACHlB,EAAGsB,IAEP,EAAKE,oBAAoBN,EAAEI,I,EAE/BG,cAAgB,WAEZ,EAAKF,SAAS,CACV3B,MAAO,MAEX,EAAK8B,WAAaC,aAAa,WACxB,EAAKZ,MAAMnB,MAAQ,EAClB,EAAK2B,SAAS,CAAC3B,MAAO,EAAKmB,MAAMnB,MAAQ,KAEzCgC,cAAc,EAAKF,YACnB,EAAKG,iBAEX,K,EAENC,aAAe,SAAA3B,GACX,EAAKoB,SAAS,CAACpB,OAAQA,K,EAE3BqB,oBAAsB,SAAAO,GAClB,EAAKR,SAAS,CAACP,cAAee,K,EAElCF,YAAc,WACN,EAAKd,MAAMZ,QAAU,EAAKY,MAAMC,eAEhCY,cAAc,EAAKF,YAEnB,EAAKH,SAAS,CACVnC,MAAO,EAAK2B,MAAM3B,MAAQ,EAC1Be,OAAQ,KAGa,IAArB,EAAKY,MAAM3B,MACX,EAAKmC,SAAS,CAACV,MAAO,IAEtB,EAAKU,SAAS,CAACV,MAAOM,KAAKa,KAAK,EAAKjB,MAAM3B,MAAQ,KAGvD,EAAKqC,gBACL,EAAKR,iBAIL,EAAKxD,MAAM2B,MAAM,EAAK2B,MAAM3B,OAC5B,EAAK3B,MAAMwE,WAEX,EAAKC,e,EAKbA,WAAa,WACT,IAAI1C,EAAU,YAAO,EAAKuB,MAAMvB,YAC1B2C,EAAY,EAAKpB,MAAM3B,MACvBxB,EAAW,EAAKH,MAAMG,SAEtBwE,EAAW,SAACC,GAEdC,MAHW,oCAGID,EAAQ,CACnBE,QAAQ,CACJ,eAAgB,oBAEpBC,OAAO,MACPC,KAAKC,KAAKC,UAAU,CAACxD,KAAMvB,EAAUwB,MAAO+C,MAC7CS,MAAK,SAAAC,GACJC,QAAQC,IAAIF,MACbG,OAAM,SAAAC,GACLH,QAAQI,KAAKD,OAIrB,GAAqC,IAAjC,EAAKlC,MAAMvB,WAAW2D,OACtB,OAAO,KAEHhB,EAAY3C,EAAW,GAAGJ,OAC1BI,EAAW,GAAGJ,MAAQ+C,EACtB3C,EAAW,GAAGL,KAAOvB,EACrBwE,EAAS,IACFD,EAAY3C,EAAW,GAAGJ,OACjCI,EAAW,GAAGJ,MAAQ+C,EACtB3C,EAAW,GAAGL,KAAOvB,EACrBwE,EAAS,IACFD,EAAY3C,EAAW,GAAGJ,OACjCI,EAAW,GAAGJ,MAAQ+C,EACtB3C,EAAW,GAAGL,KAAOvB,EACrBwE,EAAS,IAETU,QAAQC,IAAI,oBAEhB,EAAKtF,MAAM2F,WAAW,EAAKrC,MAAMvB,a,mFA7GpB,IAAD,OAChBzB,KAAK0D,gBACL1D,KAAKkD,eAELqB,MADe,qCAEVM,MAAK,SAAAC,GAAC,OAAIA,EAAEQ,UACZT,MAAK,SAAAC,GACF,EAAKtB,SAAS,CAAC/B,WAAYqD,OAE9BG,OAAM,SAAAC,GACHH,QAAQI,KAAKD,Q,6CAwGrBrB,cAAc7D,KAAK2D,c,+BAInB,OACI,oCACI,kBAAC,EAAD,CAAa9B,MAAO7B,KAAKgD,MAAMnB,QAC/B,kBAAC,EAAD,CAAWG,EAAGhC,KAAKgD,MAAMhB,EAAGC,EAAGjC,KAAKgD,MAAMf,IAC1C,kBAAC,EAAD,CAAQG,OAAQpC,KAAK+D,aAActB,UAAWzC,KAAKgD,MAAMZ,OAAQE,MAAOtC,KAAK8D,cAC7E,kBAAC,EAAD,CAAMzC,MAAOrB,KAAKgD,MAAM3B,MAAOyB,MAAO9C,KAAKgD,MAAMF,a,GAtI9ChC,aA2LJyE,E,2MA9CXvC,MAAQ,CACJ3B,MAAO,EACPmE,eAAe,EACfC,gBAAgB,EAChBC,WAAW,EACXC,UAAU,EACV9F,SAAU,aACV4B,WAAY,I,EAIhBmE,YAAc,WACV,EAAKpC,SAAS,CACVgC,eAAe,EACfE,WAAW,EACXC,UAAU,K,EAIlBA,SAAW,WACP,EAAKnC,SAAS,CACVgC,eAAe,EACfE,WAAW,EACXC,UAAU,K,EAGlBE,SAAW,SAACxE,GACR,EAAKmC,SAAS,CAACnC,MAAOA,K,EAE1BzB,WAAa,SAAAwB,GACT,EAAKoC,SAAS,CAAC3D,SAAUuB,K,EAE7B0E,iBAAmB,SAACC,GAChB,EAAKvC,SAAS,CAAC/B,WAAYsE,K,wEAG3B,OACE,yBAAKzF,UAAU,OACVN,KAAKgD,MAAMwC,eAAiB,kBAAC,EAAD,CAAe7F,MAAOK,KAAK4F,YAAa/F,SAAUG,KAAKJ,aACnFI,KAAKgD,MAAM0C,WAAa,kBAAC,EAAD,CAAMxB,SAAUlE,KAAK2F,SAAUtE,MAAOrB,KAAK6F,SAAUhG,SAAUG,KAAKgD,MAAMnD,SAAUwF,WAAYrF,KAAK8F,mBAC7H9F,KAAKgD,MAAM2C,UAAY,kBAAC,EAAD,CAAUtE,MAAOrB,KAAKgD,MAAM3B,MAAOG,MAAOxB,KAAK4F,YAAanE,WAAYzB,KAAKgD,MAAMvB,kB,GAzCvGX,aClREkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnG,SAASoG,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcjF,MAAMqD,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.ab4b1199.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.scss';\nimport Zoom from 'react-reveal/Zoom';\nimport Fade from 'react-reveal/Fade';\nimport Flash from 'react-reveal/Flash';\nimport Pulse from 'react-reveal/Pulse';\nimport Jump from 'react-reveal/Jump';\n\n\n\nclass WelcomeWindow extends Component {\n    keyDown = e => {\n        e.key === 'Enter' && this.props.close()\n    };\n    componentDidMount() {\n        this.input.focus();\n        document.addEventListener('keydown', this.keyDown)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n    changeName = (e) => {\n        this.props.userName(e.target.value)\n    };\n\n    render() {\n        return(\n            <div className='welcome'>\n                <Zoom top delay={0}><h1>HELLO!</h1></Zoom>\n                <Zoom delay={200} top><h2>Are You ready for some math?</h2></Zoom>\n                <Zoom top delay={300}><h4>Your name:</h4></Zoom>\n                <Zoom delay={450} top><input onChange={this.changeName} ref={element => this.input = element} defaultValue='GallAnonim'/></Zoom>\n                <Zoom delay={600} top><button onClick={this.props.close}>YES!</button></Zoom>\n            </div>\n        )\n    }\n}\n\nclass Test extends Component {\n    render() {\n        return(\n            <div>\n                {this.props.bestScore.map(player => {\n                    return(\n                        <div className='high-scores' key={player.id}>{player.name} {player.score}</div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nclass GameOver extends Component {\n    keyDown = e => {\n        e.key === 'Enter' && this.refresh();\n    };\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDown)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown)\n    }\n    refresh = () => {\n        this.props.ready();\n    };\n    render() {\n        return (\n            <div className='game-over'>\n                <Flash>\n                    <h1>GAME OVER</h1>\n                </Flash>\n                <Jump delay={1000}>\n                    <h1>Your score: {this.props.score}</h1>\n                </Jump>\n                <Test bestScore={this.props.bestScores}/>\n                <Pulse delay={2000} count={3}>\n                    <button onClick={this.refresh}>AGAIN!</button>\n                </Pulse>\n            </div>\n        )\n    }\n}\n\nclass ProgressBar extends Component {\n    render() {\n        const spanStyle = {\n            width: this.props.width + '%'\n        };\n        return(\n            <div className='bar'>\n                <span id=\"progress-bar\" style={spanStyle}/>\n            </div>\n        )\n    }\n}\n\nclass Operation extends Component {\n    render() {\n        return (\n                <div className='operation'>\n                    {this.props.a} + {this.props.b}\n                </div>\n        )\n    }\n}\n\nclass Answer extends Component {\n    handleChange = (e) => {\n        this.props.answer(e.target.value);\n    };\n    handleEnter = e => {\n        e.key === 'Enter' && this.props.enter();\n    };\n    componentDidMount() {\n        this.input.focus();\n    }\n    render() {\n        return <input\n            type=\"number\"\n            autoComplete='off'\n            className='answer'\n            name='answer'\n            value={this.props.zeroInput}\n            onChange={this.handleChange}\n            ref={element => this.input = element}\n            onKeyDown={this.handleEnter}\n        />\n    }\n}\n\nclass Info extends Component {\n\n    render() {\n        return (\n             <div className='score'>\n                 <Fade right duration={1500}>\n                 <h1>Score: {this.props.score}</h1>\n                 <h1>Level: {this.props.level}</h1>\n                 </Fade>\n             </div>\n        )\n    }\n}\n\nclass Game extends Component {\n    state = {\n        score: 0,\n        level: 1,\n        answer: '',\n        correctAnswer: '',\n        width: 0,\n        a: 0,\n        b: 0,\n        bestScores: []\n    };\n    componentDidMount() {\n        this.startInterval();\n        this.randomNumber();\n        const apiURL = 'http://localhost:3010/bestScores/';\n        fetch(apiURL)\n            .then(r => r.json())\n            .then(r => {\n                this.setState({bestScores: r});\n            })\n            .catch(err => {\n                console.warn(err);\n            })\n    }\n    randomNumber = () => {\n        let c = Math.round(Math.random()*(this.state.level * 10));\n        let d = Math.round(Math.random()*(this.state.level * 10));\n        this.setState({\n            a: c,\n            b: d\n        });\n        this.changeCorrectAnswer(c+d);\n    };\n    startInterval = () => {\n\n        this.setState({\n            width: 100,\n        });\n        this.intervalID = setInterval( () =>{\n            if(this.state.width > 0) {\n                this.setState({width: this.state.width - 1})\n            } else {\n                clearInterval(this.intervalID);\n                this.checkAnswer();\n            }\n        },30)\n    };\n    changeAnswer = answer => {\n        this.setState({answer: answer})\n    };\n    changeCorrectAnswer = result => {\n        this.setState({correctAnswer: result})\n    };\n    checkAnswer = () => {\n        if (this.state.answer == this.state.correctAnswer) {\n\n            clearInterval(this.intervalID);\n\n            this.setState({\n                score: this.state.score + 1,\n                answer: ''\n            });\n\n            if (this.state.score === 0) {\n                this.setState({level: 1});\n            } else {\n                this.setState({level: Math.ceil(this.state.score / 5)});\n            }\n\n            this.startInterval();\n            this.randomNumber();\n\n\n        } else {\n            this.props.score(this.state.score);\n            this.props.gameover();\n            // tutaj por wynikow\n            this.checkScore();\n\n\n        }\n    };\n    checkScore = () => {\n        let bestScores = [...this.state.bestScores];\n        const userScore = this.state.score;\n        const userName = this.props.userName;\n        const apiURL = 'http://localhost:3010/bestScores/';\n        const newFetch = (number) => {\n\n            fetch(apiURL + number, {\n                headers:{\n                    \"Content-Type\": \"application/json\"\n                },\n                method:\"PUT\",\n                body:JSON.stringify({name: userName, score: userScore})\n            }).then(r=>{\n                console.log(r)\n            }).catch(err=>{\n                console.warn(err)\n            })\n        };\n\n        if (this.state.bestScores.length === 0) {\n            return null\n        } else {\n            if (userScore > bestScores[0].score) {\n                bestScores[0].score = userScore;\n                bestScores[0].name = userName;\n                newFetch(1);\n            } else if (userScore > bestScores[1].score) {\n                bestScores[1].score = userScore;\n                bestScores[1].name = userName;\n                newFetch(2);\n            } else if (userScore > bestScores[2].score) {\n                bestScores[2].score = userScore;\n                bestScores[2].name = userName;\n                newFetch(3);\n            }else{\n                console.log(\"spadaj na drzewo\")\n            }\n            this.props.highScores(this.state.bestScores);\n        }\n\n    };\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    render() {\n        return(\n            <>\n                <ProgressBar width={this.state.width}/>\n                <Operation a={this.state.a} b={this.state.b}/>\n                <Answer answer={this.changeAnswer} zeroInput={this.state.answer} enter={this.checkAnswer}/>\n                <Info score={this.state.score} level={this.state.level}/>\n            </>\n        )\n    }\n}\n\nclass App extends Component {\n    state = {\n        score: 0,\n        welcomeWindow: true,\n        countingWindow: false,\n        appWindow: false,\n        gameOver: false,\n        userName: 'GallAnonim',\n        bestScores: [],\n\n    };\n\n    readyToGame = () => {\n        this.setState({\n            welcomeWindow: false,\n            appWindow: true,\n            gameOver: false\n\n        })\n    };\n    gameOver = () => {\n        this.setState({\n            welcomeWindow: false,\n            appWindow: false,\n            gameOver: true\n        })\n    };\n    setScore = (score) => {\n        this.setState({score: score})\n    };\n    changeName = name => {\n        this.setState({userName: name})\n    };\n    changeBestScores = (scores) => {\n        this.setState({bestScores: scores})\n    };\n    render() {\n        return (\n          <div className=\"App\">\n              {this.state.welcomeWindow && <WelcomeWindow close={this.readyToGame} userName={this.changeName}/>}\n              {this.state.appWindow && <Game gameover={this.gameOver} score={this.setScore} userName={this.state.userName} highScores={this.changeBestScores}/>}\n              {this.state.gameOver && <GameOver score={this.state.score} ready={this.readyToGame} bestScores={this.state.bestScores}/>}\n          </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}